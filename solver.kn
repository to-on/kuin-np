+class Solver()
  const box_x: int :: 3
  const box_y: int :: 2
  const board_size: int :: box_x * box_y
  const cell_size: int :: board_size * board_size

  +func getBoardSize(): int
    ret board_size
  end func
  +func getCellSize(): int
    ret cell_size
  end func

  +var candidates: []bit16
  +var answer: []int
  var emptyCellCount: int
  var noSolutionFlag: bool

  +func printPuzzle(puz: []int)
    ; size
    if (^puz <> cell_size)
      do cui@print("error puz size : \{^puz}\n")
      ret
    end if

    ; bar
    var bar: []char :: "+"
    for (1, box_y)
      for (1, box_x)
        do bar:~ "-"
      end for
      do bar:~ "+"
    end for
    do bar:~ "\n"

    ; print
    for j(0, board_size - 1)
      if (j % box_y = 0)
        do cui@print("\{bar}")
      end if
      for i(0, board_size - 1)
        if (i % box_x = 0)
          do cui@print("|")
        end if
        var p: int :: i + j * board_size
        do cui@print("\{puz[p]}")
      end for
      do cui@print("|\n")
    end for
    do cui@print("\{bar}")
  end func

  +func printAnswer()
    do me.printPuzzle(me.answer)
  end func

  +func printCandidates()
    for j(0, board_size - 1)
      for by(0, box_y - 1)
        for i(0, board_size - 1)
          var p: int :: i + j * board_size
          for bx(0, box_x - 1)
            var n: int :: bx + by * box_x
            if (me.candidates[p].and(1b16.shl(n)) <> 0b16)
              do cui@print("\{n + 1}")
            else
              do cui@print(" ")
            end if
          end for
          do cui@print(" ")
        end for
        do cui@print("\n")
      end for
    end for
  end func

  func init()
    do me.candidates :: #[cell_size]bit16
    for i(0, ^me.candidates - 1)
      do me.candidates[i] :: 0b16.not().shr(16 - board_size)
    end for
    do me.answer :: #[cell_size]int
    do me.emptyCellCount :: cell_size
    do me.noSolutionFlag :: false
  end func

  *func ctor()
    do me.init()
  end func

  func deleteCandidate(p: int, n: int)
    if (me.noSolutionFlag)
      ret
    end if
    var b: bit16 :: 1b16.shl(n)
    if (me.candidates[p].and(b) = 0b16)
      ret
    end if
    do me.candidates[p] :: me.candidates[p].and(b.not())

    var x: int :: p % board_size
    var y: int :: p / board_size
    var bx: int :: x / box_x * box_x
    var by: int :: y / box_y * box_y

    var cnt: int
    var q: int

    ; row
    do cnt :: 0
    for i(0, board_size - 1)
      var t: int :: i + y * board_size
      if (me.candidates[t].and(b) <> 0b16)
        do cnt :+ 1
        do q :: t
        if (cnt > 1)
          break i
        end if
      end if
    end for
    if (cnt = 1)
      do me.putNumber(q, n)
    elif (cnt = 0)
      do me.noSolutionFlag :: true
      ret
    end if

    ; column
    do cnt :: 0
    for i(0, board_size - 1)
      var t: int :: x + i * board_size
      if (me.candidates[t].and(b) <> 0b16)
        do cnt :+ 1
        do q :: t
        if (cnt > 1)
          break i
        end if
      end if
    end for
    if (cnt = 1)
      do me.putNumber(q, n)
    elif (cnt = 0)
      do me.noSolutionFlag :: true
      ret
    end if

    ; box
    do cnt :: 0
    for i(0, board_size - 1)
      var t: int :: bx + i % box_x + (by + i / box_x) * board_size
      if (me.candidates[t].and(b) <> 0b16)
        do cnt :+ 1
        do q :: t
        if (cnt > 1)
          break i
        end if
      end if
    end for
    if (cnt = 1)
      do me.putNumber(q, n)
    elif (cnt = 0)
      do me.noSolutionFlag :: true
      ret
    end if

    ; cell
    do cnt :: 0
    for i(0, board_size - 1)
      if (me.candidates[p].and(1b16.shl(i)) <> 0b16)
        do cnt :+ 1
        do q :: i
        if (cnt > 1)
          break i
        end if
      end if
    end for
    if (cnt = 1)
      do me.putNumber(p, q)
    elif (cnt = 0)
      do me.noSolutionFlag :: true
      ret
    end if

  end func

  +func putNumber(p: int, n: int)
    if (me.noSolutionFlag)
      ret
    end if
    var b: bit16 :: 1b16.shl(n)
    if (me.candidates[p].and(b) = 0b16)
      do me.noSolutionFlag :: true
      ret
    end if
    if (me.answer[p] <> 0)
      if (me.answer[p] <> n + 1)
        do me.noSolutionFlag :: true
      end if
      ret
    end if

    ; 確定処理
    do me.answer[p] :: n + 1
    do me.emptyCellCount :- 1

    var x: int :: p % board_size
    var y: int :: p / board_size
    var bx: int :: x / box_x * box_x
    var by: int :: y / box_y * box_y
    for i(0, board_size - 1)
      if (i <> n)
        do me.deleteCandidate(p, i)
      end if
      if (x <> i)
        do me.deleteCandidate(i + y * board_size, n)
      end if
      if (y <> i)
        do me.deleteCandidate(x + i * board_size, n)
      end if
      var j: int :: bx + i % box_x + (by + i / box_x) * board_size
      if (j <> p)
        do me.deleteCandidate(j, n)
      end if
    end for
  end func

  +func setPuzzle(puz: []int)
    do me.init()
    for i(0, ^puz)
      if (i >= cell_size)
        break i
      end if
      if (puz[i] <> 0)
        do me.putNumber(i, puz[i] - 1)
      end if
    end for
  end func

  +func setPuzzleStr(puz: []char)
    do me.init()
    var c: []char :: #[1]char
    var n: int
    for i(0, ^puz)
      if (i >= cell_size)
        break i
      end if
      if (puz[i] > '0' & puz[i] <= '9')
        do c[0] :: puz[i]
        do c.toInt(&n)
        do me.putNumber(i, n - 1)
      end if
    end for
  end func

  +func getScore(): int
    if (me.noSolutionFlag)
      ret cell_size
    end if
    ret me.emptyCellCount
  end func
end class
