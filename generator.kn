+class Generator()
  var solver: \solver@Solver
  var puzzle: []int
  var score: int
  var posList: []int
  var numList: []int

  func initPuzzle(clueCount: int): bool
    var count: int :: 0
    do me.solver :: #\solver@Solver
    do me.puzzle :: #[me.solver.getCellSize()]int
    do me.score :: me.solver.getCellSize()
    do me.posList :: #[me.solver.getCellSize()]int
    do me.numList :: #[me.solver.getBoardSize()]int
    var r: lib@Rnd :: lib@makeRnd(-1)

    for i(0, ^me.posList - 1)
      do me.posList[i] :: i
    end for
    for i(0, ^me.numList - 1)
      do me.numList[i] :: i + 1
    end for

    while i(count < clueCount)
      var p: int :: r.rnd(0, me.solver.getCellSize() - 1)
      if (me.puzzle[p] <> 0)
        skip i
      end if
      var n: int :: r.rnd(1, me.solver.getBoardSize())
      if (me.solver.getCandidate(p, n))
        skip i
      end if
      do me.solver.putNumber(p, n - 1)
      do count :+ 1
      if (me.score < me.solver.getScore())
        ret false
      end if
      do me.score :: me.solver.getScore()
      do me.puzzle[p] :: n
    end while
    ret true
  end func

  func localSearch(): bool
    var clueList: []int :: #[0]int
    var a: []int :: #[1]int
    for i(0, ^me.puzzle - 1)
      if (me.puzzle[i] <> 0)
        do a[0] :: i
        do clueList :~ a
      end if
    end for

    do clueList.shuffle()
    do me.posList.shuffle()
    do me.numList.shuffle()

    for i(0, ^clueList - 1)
      var p: int :: clueList[i]
      var m: int :: me.puzzle[p]
      do me.puzzle[p] :: 0
      for q(0, ^me.posList - 1)
        if (me.puzzle[q] <> 0)
          skip q
        end if
        for n(0, ^me.numList - 1)
          do me.puzzle[q] :: n
          do me.solver.setPuzzle(me.puzzle)
          var t: int :: me.solver.getScore()
          if (me.score > t)
            do me.score :: t
            ret true
          end if
          do me.puzzle[q] :: 0
        end for
      end for
      do me.puzzle[p] :: m
    end for

    ret false
  end func

  +func generate(clueCount: int): bool
    while (me.initPuzzle(clueCount) = false)
    end while
    while (me.localSearch(), skip)
      if (me.score = 0)
        ret true
      end if
    end while
    ret false
  end func

  +func getPuzzle(): []int
    ret me.puzzle
  end func
end class
